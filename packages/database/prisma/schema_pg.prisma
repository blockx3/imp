// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/pg_client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model idea {
  id                String              @id @default(cuid())
  serial_number     Int                 @default(autoincrement())
  title             String
  description       String
  content           String
  author_username   String
  author_user_Id    String
  media             Json?
  upvotes_count     Int                 @default(0)
  downvotes_count   Int                 @default(0)
  comment_count     Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  idea_comments     idea_comments[]
  idea_vote_actions idea_vote_actions[]
}

model idea_comments {
  id              String   @id @default(cuid())
  author_username String
  author_user_Id  String
  content         String
  upvotes_count   Int      @default(0)
  downvotes_count Int      @default(0)
  media           Json?
  idea            idea     @relation(fields: [ideaId], references: [id])
  ideaId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum POST_TYPE {
  COMMON_POST
  COMMENT_POST
}

enum voteaction_type {
  UPVOTE
  DOWNVOTE
}

model idea_vote_actions {
  id              String          @id @default(cuid())
  author_username String
  author_user_Id  String
  voteaction_type voteaction_type
  createdAt       DateTime        @default(now())
  idea            idea            @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId          String
}
